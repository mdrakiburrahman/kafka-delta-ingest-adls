/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.microsoft.kdi;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class KafkaMessage extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3580092240737562066L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"KafkaMessage\",\"namespace\":\"com.microsoft.kdi\",\"fields\":[{\"name\":\"topic\",\"type\":\"string\"},{\"name\":\"key\",\"type\":\"string\"},{\"name\":\"value\",\"type\":\"string\"},{\"name\":\"offset\",\"type\":\"long\"},{\"name\":\"partition\",\"type\":\"int\"},{\"name\":\"timestamp\",\"type\":\"long\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence topic;
  @Deprecated public java.lang.CharSequence key;
  @Deprecated public java.lang.CharSequence value;
  @Deprecated public long offset;
  @Deprecated public int partition;
  @Deprecated public long timestamp;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public KafkaMessage() {}

  /**
   * All-args constructor.
   * @param topic The new value for topic
   * @param key The new value for key
   * @param value The new value for value
   * @param offset The new value for offset
   * @param partition The new value for partition
   * @param timestamp The new value for timestamp
   */
  public KafkaMessage(java.lang.CharSequence topic, java.lang.CharSequence key, java.lang.CharSequence value, java.lang.Long offset, java.lang.Integer partition, java.lang.Long timestamp) {
    this.topic = topic;
    this.key = key;
    this.value = value;
    this.offset = offset;
    this.partition = partition;
    this.timestamp = timestamp;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return topic;
    case 1: return key;
    case 2: return value;
    case 3: return offset;
    case 4: return partition;
    case 5: return timestamp;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: topic = (java.lang.CharSequence)value$; break;
    case 1: key = (java.lang.CharSequence)value$; break;
    case 2: value = (java.lang.CharSequence)value$; break;
    case 3: offset = (java.lang.Long)value$; break;
    case 4: partition = (java.lang.Integer)value$; break;
    case 5: timestamp = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'topic' field.
   * @return The value of the 'topic' field.
   */
  public java.lang.CharSequence getTopic() {
    return topic;
  }

  /**
   * Sets the value of the 'topic' field.
   * @param value the value to set.
   */
  public void setTopic(java.lang.CharSequence value) {
    this.topic = value;
  }

  /**
   * Gets the value of the 'key' field.
   * @return The value of the 'key' field.
   */
  public java.lang.CharSequence getKey() {
    return key;
  }

  /**
   * Sets the value of the 'key' field.
   * @param value the value to set.
   */
  public void setKey(java.lang.CharSequence value) {
    this.key = value;
  }

  /**
   * Gets the value of the 'value' field.
   * @return The value of the 'value' field.
   */
  public java.lang.CharSequence getValue() {
    return value;
  }

  /**
   * Sets the value of the 'value' field.
   * @param value the value to set.
   */
  public void setValue(java.lang.CharSequence value) {
    this.value = value;
  }

  /**
   * Gets the value of the 'offset' field.
   * @return The value of the 'offset' field.
   */
  public java.lang.Long getOffset() {
    return offset;
  }

  /**
   * Sets the value of the 'offset' field.
   * @param value the value to set.
   */
  public void setOffset(java.lang.Long value) {
    this.offset = value;
  }

  /**
   * Gets the value of the 'partition' field.
   * @return The value of the 'partition' field.
   */
  public java.lang.Integer getPartition() {
    return partition;
  }

  /**
   * Sets the value of the 'partition' field.
   * @param value the value to set.
   */
  public void setPartition(java.lang.Integer value) {
    this.partition = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public java.lang.Long getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.Long value) {
    this.timestamp = value;
  }

  /**
   * Creates a new KafkaMessage RecordBuilder.
   * @return A new KafkaMessage RecordBuilder
   */
  public static com.microsoft.kdi.KafkaMessage.Builder newBuilder() {
    return new com.microsoft.kdi.KafkaMessage.Builder();
  }

  /**
   * Creates a new KafkaMessage RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new KafkaMessage RecordBuilder
   */
  public static com.microsoft.kdi.KafkaMessage.Builder newBuilder(com.microsoft.kdi.KafkaMessage.Builder other) {
    return new com.microsoft.kdi.KafkaMessage.Builder(other);
  }

  /**
   * Creates a new KafkaMessage RecordBuilder by copying an existing KafkaMessage instance.
   * @param other The existing instance to copy.
   * @return A new KafkaMessage RecordBuilder
   */
  public static com.microsoft.kdi.KafkaMessage.Builder newBuilder(com.microsoft.kdi.KafkaMessage other) {
    return new com.microsoft.kdi.KafkaMessage.Builder(other);
  }

  /**
   * RecordBuilder for KafkaMessage instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<KafkaMessage>
    implements org.apache.avro.data.RecordBuilder<KafkaMessage> {

    private java.lang.CharSequence topic;
    private java.lang.CharSequence key;
    private java.lang.CharSequence value;
    private long offset;
    private int partition;
    private long timestamp;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.microsoft.kdi.KafkaMessage.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.topic)) {
        this.topic = data().deepCopy(fields()[0].schema(), other.topic);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.key)) {
        this.key = data().deepCopy(fields()[1].schema(), other.key);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.value)) {
        this.value = data().deepCopy(fields()[2].schema(), other.value);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.offset)) {
        this.offset = data().deepCopy(fields()[3].schema(), other.offset);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.partition)) {
        this.partition = data().deepCopy(fields()[4].schema(), other.partition);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[5].schema(), other.timestamp);
        fieldSetFlags()[5] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing KafkaMessage instance
     * @param other The existing instance to copy.
     */
    private Builder(com.microsoft.kdi.KafkaMessage other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.topic)) {
        this.topic = data().deepCopy(fields()[0].schema(), other.topic);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.key)) {
        this.key = data().deepCopy(fields()[1].schema(), other.key);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.value)) {
        this.value = data().deepCopy(fields()[2].schema(), other.value);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.offset)) {
        this.offset = data().deepCopy(fields()[3].schema(), other.offset);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.partition)) {
        this.partition = data().deepCopy(fields()[4].schema(), other.partition);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[5].schema(), other.timestamp);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'topic' field.
      * @return The value.
      */
    public java.lang.CharSequence getTopic() {
      return topic;
    }

    /**
      * Sets the value of the 'topic' field.
      * @param value The value of 'topic'.
      * @return This builder.
      */
    public com.microsoft.kdi.KafkaMessage.Builder setTopic(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.topic = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'topic' field has been set.
      * @return True if the 'topic' field has been set, false otherwise.
      */
    public boolean hasTopic() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'topic' field.
      * @return This builder.
      */
    public com.microsoft.kdi.KafkaMessage.Builder clearTopic() {
      topic = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'key' field.
      * @return The value.
      */
    public java.lang.CharSequence getKey() {
      return key;
    }

    /**
      * Sets the value of the 'key' field.
      * @param value The value of 'key'.
      * @return This builder.
      */
    public com.microsoft.kdi.KafkaMessage.Builder setKey(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.key = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'key' field has been set.
      * @return True if the 'key' field has been set, false otherwise.
      */
    public boolean hasKey() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'key' field.
      * @return This builder.
      */
    public com.microsoft.kdi.KafkaMessage.Builder clearKey() {
      key = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'value' field.
      * @return The value.
      */
    public java.lang.CharSequence getValue() {
      return value;
    }

    /**
      * Sets the value of the 'value' field.
      * @param value The value of 'value'.
      * @return This builder.
      */
    public com.microsoft.kdi.KafkaMessage.Builder setValue(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.value = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'value' field has been set.
      * @return True if the 'value' field has been set, false otherwise.
      */
    public boolean hasValue() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'value' field.
      * @return This builder.
      */
    public com.microsoft.kdi.KafkaMessage.Builder clearValue() {
      value = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'offset' field.
      * @return The value.
      */
    public java.lang.Long getOffset() {
      return offset;
    }

    /**
      * Sets the value of the 'offset' field.
      * @param value The value of 'offset'.
      * @return This builder.
      */
    public com.microsoft.kdi.KafkaMessage.Builder setOffset(long value) {
      validate(fields()[3], value);
      this.offset = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'offset' field has been set.
      * @return True if the 'offset' field has been set, false otherwise.
      */
    public boolean hasOffset() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'offset' field.
      * @return This builder.
      */
    public com.microsoft.kdi.KafkaMessage.Builder clearOffset() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'partition' field.
      * @return The value.
      */
    public java.lang.Integer getPartition() {
      return partition;
    }

    /**
      * Sets the value of the 'partition' field.
      * @param value The value of 'partition'.
      * @return This builder.
      */
    public com.microsoft.kdi.KafkaMessage.Builder setPartition(int value) {
      validate(fields()[4], value);
      this.partition = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'partition' field has been set.
      * @return True if the 'partition' field has been set, false otherwise.
      */
    public boolean hasPartition() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'partition' field.
      * @return This builder.
      */
    public com.microsoft.kdi.KafkaMessage.Builder clearPartition() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public java.lang.Long getTimestamp() {
      return timestamp;
    }

    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public com.microsoft.kdi.KafkaMessage.Builder setTimestamp(long value) {
      validate(fields()[5], value);
      this.timestamp = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public com.microsoft.kdi.KafkaMessage.Builder clearTimestamp() {
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    public KafkaMessage build() {
      try {
        KafkaMessage record = new KafkaMessage();
        record.topic = fieldSetFlags()[0] ? this.topic : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.key = fieldSetFlags()[1] ? this.key : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.value = fieldSetFlags()[2] ? this.value : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.offset = fieldSetFlags()[3] ? this.offset : (java.lang.Long) defaultValue(fields()[3]);
        record.partition = fieldSetFlags()[4] ? this.partition : (java.lang.Integer) defaultValue(fields()[4]);
        record.timestamp = fieldSetFlags()[5] ? this.timestamp : (java.lang.Long) defaultValue(fields()[5]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
